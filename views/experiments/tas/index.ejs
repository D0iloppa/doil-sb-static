<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ASCII Art 카메라</title>
    <style>
        body {
            margin: 0;
            padding: 20px;
            background: #000;
            color: #0f0;
            font-family: 'Courier New', monospace;
            display: flex;
            flex-direction: column;
            align-items: center;
            min-height: 100vh;
        }

        .header {
            background-color: black;
            border: 1px solid #0f0;
            padding: 10px;
            margin-bottom: 15px;
            text-align: center;
        }
        
        h1 {
            color: #0f0;
            text-align: center;
            margin-bottom: 20px;
        }
        
        #video {
            display: none;
        }
        
        #ascii-output {
            background: #000;
            color: #0f0;
            font-family: 'Courier New', monospace;
            font-size: 8px;
            line-height: 6px;
            letter-spacing: 0;
            white-space: pre;
            border: 2px solid #0f0;
            padding: 10px;
            margin: 10px 0;
            overflow: hidden;
            max-width: 100vw;
        }
        
        #controls {
            display: flex;
            gap: 10px;
            margin: 20px 0;
            flex-wrap: wrap;
            justify-content: center;
        }
        
        button {
            background: #0f0;
            color: #000;
            border: none;
            padding: 10px 20px;
            font-family: 'Courier New', monospace;
            font-weight: bold;
            cursor: pointer;
            border-radius: 5px;
        }
        
        button:hover {
            background: #0a0;
        }
        
        button:disabled {
            background: #555;
            cursor: not-allowed;
        }
        
        .slider-container {
            display: flex;
            align-items: center;
            gap: 10px;
            color: #0f0;
        }
        
        input[type="range"] {
            background: #333;
        }
        
        #status {
            color: #0f0;
            text-align: center;
            margin: 10px 0;
        }
        
        canvas {
            display: none;
        }
    </style>
</head>
<body>
    <h1>📹 ASCII Art 카메라</h1>
    
    <div id="status">카메라 시작 버튼을 눌러주세요</div>
    
    <div id="controls">
        <button id="start-btn">카메라 시작</button>
        <button id="stop-btn" disabled>카메라 정지</button>
        
        <div class="slider-container">
            <label>해상도:</label>
            <input type="range" id="resolution" min="20" max="100" value="60">
            <span id="resolution-value">60</span>
        </div>
    </div>
    
    <video id="video" autoplay playsinline></video>
    <canvas id="canvas"></canvas>
    <div id="ascii-output"></div>

    <script>
        const video = document.getElementById('video');
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');
        const asciiOutput = document.getElementById('ascii-output');
        const startBtn = document.getElementById('start-btn');
        const stopBtn = document.getElementById('stop-btn');
        const resolutionSlider = document.getElementById('resolution');
        const resolutionValue = document.getElementById('resolution-value');
        const status = document.getElementById('status');
        
        let stream = null;
        let animationId = null;
        
        // ASCII 문자들 (어두운 것부터 밝은 것 순서)
        const asciiChars = " .:-=+*#%@";
        
        // 해상도 슬라이더 업데이트
        resolutionSlider.addEventListener('input', (e) => {
            resolutionValue.textContent = e.target.value;
        });
        
        // 카메라 시작
        startBtn.addEventListener('click', async () => {
            try {
                status.textContent = "카메라 권한을 요청중...";
                
                // 모바일에 최적화된 카메라 설정
                const constraints = {
                    video: {
                        facingMode: 'environment', // 후면 카메라 우선
                        width: { ideal: 640 },
                        height: { ideal: 480 }
                    }
                };
                
                stream = await navigator.mediaDevices.getUserMedia(constraints);
                video.srcObject = stream;
                
                video.addEventListener('loadedmetadata', () => {
                    canvas.width = video.videoWidth;
                    canvas.height = video.videoHeight;
                    startAsciiConversion();
                });
                
                startBtn.disabled = true;
                stopBtn.disabled = false;
                status.textContent = "카메라 실행중 - ASCII 변환중...";
                
            } catch (error) {
                console.error('카메라 접근 오류:', error);
                status.textContent = "카메라 접근 실패. 권한을 확인해주세요.";
            }
        });
        
        // 카메라 정지
        stopBtn.addEventListener('click', () => {
            stopCamera();
        });
        
        function stopCamera() {
            if (stream) {
                stream.getTracks().forEach(track => track.stop());
                stream = null;
            }
            
            if (animationId) {
                cancelAnimationFrame(animationId);
                animationId = null;
            }
            
            startBtn.disabled = false;
            stopBtn.disabled = true;
            status.textContent = "카메라가 정지되었습니다.";
            asciiOutput.textContent = "";
        }
        
        function startAsciiConversion() {
            function convert() {
                if (!video.videoWidth || !video.videoHeight) {
                    animationId = requestAnimationFrame(convert);
                    return;
                }
                
                // 비디오 프레임을 캔버스에 그리기
                ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
                
                // ASCII로 변환
                const ascii = videoToAscii();
                asciiOutput.textContent = ascii;
                
                animationId = requestAnimationFrame(convert);
            }
            convert();
        }
        
        function videoToAscii() {
            const resolution = parseInt(resolutionSlider.value);
            const aspectRatio = canvas.width / canvas.height;
            
            // ASCII 출력 크기 계산 (가로세로 비율 유지)
            const asciiWidth = resolution;
            const asciiHeight = Math.floor(resolution / aspectRatio / 2); // 높이를 절반으로 (문자의 세로가 가로보다 길어서)
            
            // 이미지 데이터 가져오기
            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
            const pixels = imageData.data;
            
            let ascii = '';
            
            for (let y = 0; y < asciiHeight; y++) {
                for (let x = 0; x < asciiWidth; x++) {
                    // 원본 이미지에서 샘플링할 좌표 계산
                    const srcX = Math.floor((x / asciiWidth) * canvas.width);
                    const srcY = Math.floor((y / asciiHeight) * canvas.height);
                    
                    // 픽셀 인덱스 계산
                    const pixelIndex = (srcY * canvas.width + srcX) * 4;
                    
                    // RGB를 grayscale로 변환
                    const r = pixels[pixelIndex];
                    const g = pixels[pixelIndex + 1];
                    const b = pixels[pixelIndex + 2];
                    const gray = Math.floor(0.299 * r + 0.587 * g + 0.114 * b);
                    
                    // grayscale 값을 ASCII 문자 인덱스로 변환
                    const asciiIndex = Math.floor((gray / 255) * (asciiChars.length - 1));
                    ascii += asciiChars[asciiIndex];
                }
                ascii += '\n';
            }
            
            return ascii;
        }
        
        // 페이지 떠날 때 카메라 정리
        window.addEventListener('beforeunload', () => {
            stopCamera();
        });
        
        // 화면 방향 변경 시 재조정
        window.addEventListener('orientationchange', () => {
            setTimeout(() => {
                if (stream && video.videoWidth && video.videoHeight) {
                    canvas.width = video.videoWidth;
                    canvas.height = video.videoHeight;
                }
            }, 500);
        });
    </script>
</body>
</html>